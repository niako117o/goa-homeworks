 #0)კომენტარის სახით ახსენით append/insert/pop/len/upper/lower/capitalize/find და დაწერეთ ინფორმაცია მათი არგუმენტების შესახებ

# 1. append():
 #    გამოიყენება სიის (list) ბოლოს ახალი ელემენტის დასამატებლად.
 #    არგუმენტი: ერთი ელემენტი, რომელიც დაემატება სიას.
my_list = [1, 2, 3]
my_list.append(4)  # my_list გახდება [1, 2, 3, 4]

# 2. insert():
#    საშუალებას გაძლევთ, სიის (list) კონკრეტულ პოზიციაზე დაამატოთ ელემენტი.
#    არგუმენტები:
#       - პირველი: ინდექსი (index), სადაც ელემენტი დაემატება.
#       - მეორე: ელემენტი, რომელიც დაემატება.
my_list.insert(1, "new")  # my_list გახდება [1, 'new', 2, 3, 4]

# 3. pop():
#    სიის (list) ელემენტის ამოსაღებად და წასაშლელად გამოიყენება.
#    არგუმენტი:
#       - ინდექსი (optional): ელემენტის პოზიცია, რომელიც წაიშლება.
#         თუ ინდექსი არ მიეთითება, წაიშლება ბოლო ელემენტი. my_list.pop()        # შლის ბოლო ელემენტს: [1, 'new', 2, 3]
my_list.pop(1)       # შლის მეორე ელემენტს: [1, 2, 3]

# 4. len():
#    აბრუნებს ობიექტის (მაგ., სიის, სტრიქონის) ელემენტების რაოდენობას.
#    არგუმენტი:
#       - iterable ობიექტი (მაგ., list, string, tuple და ა.შ.).
length = len(my_list)  # length იქნება 3

# 5. upper():
#    სტრიქონს ყველა სიმბოლოს დიდ ასოებად გადააქცევს.
#    არგუმენტი: არ აქვს.
text = "hello"
print(text.upper())  # "HELLO"

# 6. lower():
#    სტრიქონს ყველა სიმბოლოს პატარა ასოებად გადააქცევს.
#    არგუმენტი: არ აქვს.
print(text.lower())  # "hello"

# 7. capitalize():
#    სტრიქონის პირველი ასო გახდება დიდი, ხოლო დანარჩენი პატარა.
#    არგუმენტი: არ აქვს.
print(text.capitalize())  # "Hello"

# 8. find():
#    ეძებს სიმბოლოს ან ქვეწერის პირველ მდებარეობას სტრიქონში.
#    არგუმენტები:
#       - პირველი (required): ქვეწერი, რომლის პოვნა გსურთ.
#       - მეორე (optional): საძიებო საწყისი ინდექსი.
#       - მესამე (optional): საძიებო დასასრული ინდექსი.
index = text.find("l")  # index იქნება 2
not_found = text.find("z")  # not_found იქნება -1, რადგან 'z' არ არის ტექსტში.

#1)შექმენით სია, შეიყვანეთ 5 გვარი, შემდეგ მომხმარებელს შემოატანინეთ მისი სახელი, თუ სახელი შეიცავს 7-ზე მეტ სიმბოლოს მაშინ ჩაამატეთ სახელების სიაში

last_names = ["ბერიძე", "კვარაცხელია", "მგელაძე", "ჩოხელი", "გოგოლაძე"]
name = input("გთხოვთ, შეიყვანოთ თქვენი სახელი: ")
if len(name) > 7:
    last_names.append(name)
    print("თქვენი სახელი დაემატა სიას!")
else:
    print("თქვენი სახელი არ დაემატა სიას, რადგან ის 7-ზე ნაკლები სიმბოლოს შეიცავს.")
print("განახლებული სია:", last_names)

#2)შექმენით სია 10 ელემენტით და გამოიტანეთ მხოლოდ ლუწ ინდექსზე მდგომი ელემენტები.

my_list = [10, 21, 32, 43, 54, 65, 76, 87, 98, 109]
even_index_elements = my_list[0::2]  
print("ლუწ ინდექსებზე მდგომი ელემენტები:", even_index_elements)

#3)შექმენით ცვლადი რომელშიც შენახული იქნება სტრინგი შემდეგ კი გაიგეთ ამ სტრინგის სიმბოლოების რაოდენობა.
my_string = "გამარჯობა, როგორ ხართ?"
char_count = len(my_string)
print("სტრინგის სიმბოლოების რაოდენობა არის:", char_count)

#4) მომხმარებელს შემოატანინეთ მისი სახელი დიდი ასოებით და შეინახეთ ცვლადში სახელად name და .lower() ფუნქციის მეშვეობით გადააქციეთ ცვლადის მნიშვნელობა  პატარა ასოებად. 
name = input("შეიყვანეთ თქვენი სახელი დიდი ასოებით: ")
name = name.lower()
print("თქვენი სახელი პატარა ასოებით: ", name)

#5) ცვლადში შეინახეთ თქვენი გვარი პატარა ასოებით, შემდეგ .upper() ფუნქციის მეშვეობით გადააქციეთ ცვლადის მნიშვნელობა  დიდ ასოებად.
# ცვლადში ვინახავთ გვარს პატარა ასოებით
surname = "სიმონია"
surname = surname.upper()
print("თქვენი გვარი დიდ ასოებით: ", surname)

#6) ცვლადში შეინახეთ სტრინგი პატარა ასოებით, შემდეგ .capitalize() ფუნქციის მეშვეობით გადააქციე პირველი ასო დიდ ასოდ.
text = "გამარჯობა, როგორ ხართ?"
text = text.capitalize()
print("სტრინგი პირველი ასოს გადიდებით: ", text)






































